#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <arpa/inet.h>
#include <sys/socket.h>

#define PORT 12345 // Wybierz dowolny numer portu

int main() {
    int sockfd, new_sock;
    struct sockaddr_in server_addr, client_addr;
    socklen_t client_len;
    char message[256];

    // Tworzenie gniazda
    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sockfd == -1) {
        perror("Błąd tworzenia gniazda");
        exit(EXIT_FAILURE);
    }

    // Konfiguracja adresu serwera
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(PORT);
    server_addr.sin_addr.s_addr = INADDR_ANY; // Nasłuchiwanie na wszystkich interfejsach

    // Przypisanie adresu do gniazda
    if (bind(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) == -1) {
        perror("Błąd przypisywania adresu");
        close(sockfd);
        exit(EXIT_FAILURE);
    }

    // Nasłuchiwanie na połączenia
    listen(sockfd, 1);
    printf("Oczekiwanie na połączenie...\n");

    // Akceptowanie połączenia
    client_len = sizeof(client_addr);
    new_sock = accept(sockfd, (struct sockaddr*)&client_addr, &client_len);
    if (new_sock == -1) {
        perror("Błąd akceptowania połączenia");
        close(sockfd);
        exit(EXIT_FAILURE);
    }
    printf("Połączono z klientem.\n");

    // Pobieranie informacji o komputerze A
    struct sockaddr_in peer_addr;
    socklen_t peer_len = sizeof(peer_addr);
    getpeername(new_sock, (struct sockaddr*)&peer_addr, &peer_len);
    printf("Komputer A: %s:%d\n", inet_ntoa(peer_addr.sin_addr), ntohs(peer_addr.sin_port));

    // Wysyłanie i odbieranie wiadomości
    while (1) {
        printf("Wpisz wiadomość: ");
        fgets(message, sizeof(message), stdin);
        send(new_sock, message, strlen(message), 0);

        recv(new_sock, message, sizeof(message), 0);
        printf("Otrzymano: %s", message);
    }

    // Zamykanie gniazda
    close(new_sock);
    close(sockfd);

    return 0;
}
